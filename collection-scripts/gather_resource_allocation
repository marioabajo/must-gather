#!/bin/bash 

BASE_COLLECTION_PATH="must-gather"
RESOURCE_ALLOCATION_PATH=${BASE_COLLECTION_PATH}/resource_allocation

mkdir -p "${RESOURCE_ALLOCATION_PATH}"/

# Extract all the resource limits, alocations and node subnets and store it in a json
oc get pods -A -o json | \
  jq -r '.items[] | select (.status.phase != "Succeeded" and .status.phase != "Failed") | ((.spec.nodeName // "(non-scheduled)") + " " + .metadata.namespace + "/" + .metadata.name + " " + (.spec.containers[] | (.resources.requests.cpu // "0") + " " + (.resources.requests.memory // "0") + " " + (.resources.limits.cpu // "0") + " " + (.resources.limits.memory // "0")))' | \
  awk '
    function tomillis(a) {
      match(a, /([0-9\.]+)(m?)/, m)
      if(m[2] == "m")
        a=m[1]
      else
        a=m[1]*1000
      return a
    }
    function num_convert(a,u) {
      cmd="numfmt --from=auto --to-unit="u" "a
      cmd | getline b
      close(cmd)
      return b
    }
    BEGIN {
      while ("oc get nodes -o json | jq -r \".items[] | (.metadata.name + \\\" \\\" + .status.allocatable.cpu + \\\" \\\" + .status.allocatable.memory + \\\" \\\" + .status.allocatable.pods)\"" | getline) {
        alloc[$1][1]=$2
        alloc[$1][2]=$3
        alloc[$1][3]=$4
      }
    }
    {
      pods[$1][$1$2] = 1
      nodes[$1]["cpur"] += tomillis($3)
      nodes[$1]["memr"] += num_convert($4,1)
      nodes[$1]["cpul"] += tomillis($5)
      nodes[$1]["meml"] += num_convert($6,1)
    }
    END {
      for (n in nodes) {
        if ( n == "(non-scheduled)" )
          printf "%s|-|%s|-|%s|-|-|%s|-|%s|-|-|%s\n",n ,nodes[n]["cpur"]"m" ,nodes[n]["cpul"]"m" ,num_convert(nodes[n]["memr"],"Mi")"Mi"\
            ,num_convert(nodes[n]["meml"],"Mi")"Mi" ,length(pods[n])
        else
          printf "%s|%s|%s|(%.0f%%)|%s|(%.0f%%)|%s|%s|(%.0f%%)|%s|(%.0f%%)|%s|%s\n",n ,alloc[n][1] ,nodes[n]["cpur"]"m"\
            ,nodes[n]["cpur"]*100/alloc[n][1] ,nodes[n]["cpul"]"m" ,nodes[n]["cpul"]*100/alloc[n][1] ,num_convert(alloc[n][2],"Mi")"Mi"\
            ,num_convert(nodes[n]["memr"],"Mi")"Mi" ,nodes[n]["memr"]*100/num_convert(alloc[n][2],1) ,num_convert(nodes[n]["meml"],"Mi")"Mi"\
            ,nodes[n]["meml"]*100/num_convert(alloc[n][2],1) ,alloc[n][3] ,length(pods[n])
      }
    }' \
| column -s "|" -J -n "node_resources" -N "node,cpu_alloc,cpu_req,cpu_req_per,cpu_lim,cpu_lim_per,mem_alloc,mem_req,mem_req_per,mem_lim,mem_lim_per,pods_alloc,pods_count"  > ${RESOURCE_ALLOCATION_PATH}/node_resources.json


# Extract the output of "oc adm top nodes" in json format
oc adm top nodes | column -J -n "top_nodes" --table-columns "node_name","cpu_cores","cpu_%","mem_bytes","mem_%" | jq -c > ${RESOURCE_ALLOCATION_PATH}/top_nodes.json

